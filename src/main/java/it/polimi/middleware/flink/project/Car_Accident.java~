package it.polimi.middleware.flink.project;

import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.api.common.functions.GroupReduceFunction;
import org.apache.flink.api.common.functions.FilterFunction;
import org.apache.flink.api.common.functions.FlatJoinFunction;
import org.apache.flink.api.common.functions.JoinFunction;

import org.apache.flink.api.java.DataSet;
import org.apache.flink.api.java.ExecutionEnvironment;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.api.java.tuple.Tuple3;
import org.apache.flink.api.java.tuple.Tuple6;
import org.apache.flink.api.java.tuple.Tuple7;
import org.apache.flink.api.java.tuple.Tuple8;
import org.apache.flink.api.java.utils.ParameterTool;
import org.apache.flink.util.Collector;
import java.util.ArrayList;



public class Car_Accident{

    public static void main(String[] args) throws Exception{
	final ParameterTool params = ParameterTool.fromArgs(args);
	final String NYPD_Motor_Vehicle_Collisions = params.get("NYPD_Motor_Vehicle_Collisions", "files/NYPD_Motor_Vehicle_Collisions.csv");
	
	final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();
	
	final DataSet<Tuple8<String, String, Integer, String, String, String, String, String>> csvData = env.readCsvFile(NYPD_Motor_Vehicle_Collisions)
	    .ignoreFirstLine()
	    .ignoreInvalidLines()
	    .includeFields("10100000000100000011111000000")
	    .types(String.class, String.class, Integer.class, String.class, String.class, String.class, String.class, String.class);

	final DataSet<Tuple6<Integer,String,String,String,String,String>> cf_fields = csvData
	    .project(2,3,4,5,6,7);
	final DataSet<Tuple7<Integer,Integer,String,String,String,String,String>> cf_lethal = cf_fields
	    .flatMap(setLethal);
	final DataSet<Tuple3<Integer,String,Integer>> cf_list_complete = cf_lethal
	    .reduceGroup(reduceFunc);
	final DataSet<Tuple3<Integer,String,Integer>> cf_list_complete_filtered = cf_list_complete
	    .filter(cfFilter);
	final DataSet<Tuple2<Integer,String>> accidentCounter = cf_list_complete_filtered
	    .project(0,1);
	final DataSet<Tuple2<Integer,String>> accidentCounter_summed = accidentCounter
	    .groupBy(1)
	    .sum(0);
	final DataSet<Tuple2<Integer,String>> lethalCounter = cf_list_complete_filtered
	    .project(2,1);
	final DataSet<Tuple2<Integer,String>> lethalCounter_summed = lethalCounter
	    .groupBy(1)
	    .sum(0);
	final DataSet<Tuple3<Integer,String,Integer>> cf_stats_joined_1 = accidentCounter
	    .join(lethalCounter)
	    .where(0)
	    .equalTo(0)
	    .projectFirst(0)
	    .projectSecond(1)
	    .projectFirst(0);

	
	lethalCounter.writeAsCsv("file:/home/antking/Bureau/output.csv", "\n", ",");
	env.execute();
    }

    private static final FlatJoinFunction<Tuple2<Integer,String>,Tuple2<Integer,String>,Tuple3<Integer,String,Integer>> joinFunc = new FlatJoinFunction<Tuple2<Integer,String>,Tuple2<Integer,String>,Tuple3<Integer,String,Integer>>() {
	    @Override
	    public void join(Tuple2<Integer,String> in1,Tuple2<Integer,String>in2,Collector<Tuple3<Integer,String,Integer>>out) throws Exception{
		out.collect(new Tuple3<Integer,String,Integer>(in1.f0,in1.f1,in2.f0));
	    }
	};

    private static final FilterFunction<Tuple3<Integer,String,Integer>> cfFilter = new FilterFunction<Tuple3<Integer,String,Integer>>() {
	@Override
	    public boolean filter(Tuple3<Integer,String,Integer> in) throws Exception{
		
		final String contributing_factor = in.f1;
		
		return ((!contributing_factor.contains("0"))&&(!contributing_factor.contains("1"))&&(!contributing_factor.contains("2"))&&(!contributing_factor.contains("3"))&&(!contributing_factor.contains("4"))&&(!contributing_factor.contains("5")));
	}
    };

    private static final FlatMapFunction<Tuple6<Integer,String,String,String,String,String>, Tuple7<Integer,Integer,String,String,String,String,String>> setLethal = new FlatMapFunction<Tuple6<Integer,String,String,String,String,String>, Tuple7<Integer,Integer,String,String,String,String,String>>() {
	    @Override
	    public void flatMap(Tuple6<Integer,String,String,String,String,String> in, Collector<Tuple7<Integer,Integer,String,String,String,String,String>> out) throws Exception{

		final int nb_person_killed = in.f0;
		final String cf_f1 = in.f1;
		final String cf_f2 = in.f2;
		final String cf_f3 = in.f3;
		final String cf_f4 = in.f4;
		final String cf_f5 = in.f5;
		
		if (nb_person_killed>0)
		    out.collect(new Tuple7<Integer,Integer,String,String,String,String,String>(1,1,cf_f1,cf_f2,cf_f3,cf_f4,cf_f5)); //Lethal
		else
		    out.collect(new Tuple7<Integer,Integer,String,String,String,String,String>(1,0,cf_f1,cf_f2,cf_f3,cf_f4,cf_f5)); //Non-Lethal
	    }
	};
    

    private static final FlatMapFunction<Tuple2<String, Integer>, Tuple2<String, Integer>> setSum = new FlatMapFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>() {
	    @Override
	    public void flatMap(Tuple2<String, Integer> in, Collector<Tuple2<String, Integer>> out) throws Exception{
		final String cf = in.f0;
		out.collect(new Tuple2<String,Integer>(in.f0,1));
	    }
	};

    private static final GroupReduceFunction<Tuple7<Integer,Integer,String,String,String,String,String>,Tuple3<Integer,String,Integer>> reduceFunc = new GroupReduceFunction< Tuple7<Integer,Integer,String,String,String,String,String>,Tuple3<Integer,String,Integer> >(){
    	    @Override
    	    public void reduce(Iterable<Tuple7<Integer,Integer,String,String,String,String,String>> in, Collector<Tuple3<Integer,String,Integer>> out)
    	    {
    		for (Tuple7<Integer,Integer,String,String,String,String,String> tuple : in)
    		    {
			ArrayList<String> dup = new ArrayList<String>();
    			Tuple3<Integer,String,Integer> t1 = new Tuple3<Integer,String,Integer>(tuple.f0,tuple.f2,tuple.f1);
    			Tuple3<Integer,String,Integer> t2 = new Tuple3<Integer,String,Integer>(tuple.f0,tuple.f3,tuple.f1);
    			Tuple3<Integer,String,Integer> t3 = new Tuple3<Integer,String,Integer>(tuple.f0,tuple.f4,tuple.f1);
    			Tuple3<Integer,String,Integer> t4 = new Tuple3<Integer,String,Integer>(tuple.f0,tuple.f5,tuple.f1);
    			Tuple3<Integer,String,Integer> t5 = new Tuple3<Integer,String,Integer>(tuple.f0,tuple.f6,tuple.f1);

			// The goal here is to avoid duplicata (e.g (1,1,Illness,Glare,Illness,,) returns (1,Illness,1) + (1,Glare,1)  and no extra (1,Illness,1) that could jeopardize the results 
			
			if (!dup.contains(tuple.f2))
			    {
				dup.add(tuple.f2);
				out.collect(t1);
			    }
			if (!dup.contains(tuple.f3))
			    {
				dup.add(tuple.f3);
				out.collect(t2);
			    }
			if (!dup.contains(tuple.f4))
			    {
				dup.add(tuple.f4);
				out.collect(t3);
			    }
			if (!dup.contains(tuple.f5))
			    {
				dup.add(tuple.f5);
				out.collect(t4);
			    }
			if (!dup.contains(tuple.f6))
			    {
				dup.add(tuple.f6);
				out.collect(t5);
			    }
			dup.clear();
    		    }
    	    }
    	};
}
